program      ::= expression

expression   ::= literal
               | variable
               | functionCall
               | letExpression
               | conditionalExpression
               | lambdaExpression
               | binaryOperation
               | unaryOperation

literal      ::= integerLiteral | floatLiteral | stringLiteral | charLiteral

variable     ::= identifier

functionCall ::= identifier '(' arguments ')'

letExpression ::= 'let' bindings 'in' expression

conditionalExpression ::= 'if' expression 'then' expression 'else' expression

lambdaExpression ::= '\' arguments '->' expression

binaryOperation ::= expression operator expression

unaryOperation ::= operator expression

bindings     ::= binding (',' binding)*

binding      ::= identifier '=' expression

arguments    ::= identifier (',' identifier)*

operator     ::= '+' | '-' | '*' | '/' | '=' | '==' | '<' | '>' | '&&' | '||' | ...

identifier   ::= letter (letter | digit | '_')*

integerLiteral ::= digit+

floatLiteral ::= digit+ '.' digit+

stringLiteral ::= '"' characters '"'

charLiteral ::= '\'' character '\''
